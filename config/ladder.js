// Generated by CoffeeScript 1.7.1
(function() {
  var User, getScore, moment, _;

  User = require("../app/models/user");

  moment = require("moment");

  _ = require("underscore");

  getScore = function(data, done) {
    var finalScore;
    finalScore = void 0;
    console.log(data);
    finalScore = (data.xp * (1 + data.level)) + (250 * data.shareTW) + (250 * data.shareFB);
    return done(finalScore);
  };

  module.exports = {
    rankUser: function(type, callback) {
      var sort, sorting;
      sorting = type === 'dailyRank' ? 'dailyScore' : type === 'weeklyRank' ? 'weeklyScore' : 'monthlyScore';
      sort = '-' + sorting;
      return User.find({}).sort(sort).exec(function(err, userSorted) {
        var leaders;
        if (err) {
          throw err;
        }
        leaders = [];
        return _.each(userSorted, function(user, rank) {
          console.log(user.local.pseudo + ' for ' + rank);
          return User.findById(user._id).exec(function(err, user) {
            mailer.cLog('Error at ' + __filename, err);
            if (type === 'dailyRank') {
              user.dailyRank = rank + 1;
            } else if (type === 'weeklyRank') {
              user.weeklyRank = rank + 1;
            } else if (type === 'monthlyRank') {
              user.monthlyRank = rank + 1;
            }
            console.log(user.local.pseudo + ' who was ' + user.dailyArchives.rank + ' is now #' + user.dailyRank);
            return user.save(function(err) {
              mailer.cLog('Error at ' + __filename, err);
              if (rank + 1 < 4) {
                leaders.push(user);
              }
              if ((rank + 1 > 3) || (rank + 1 >= userSorted.length)) {
                return callback(leaders);
              }
            });
          });
        });
      });
    },
    dailyUpdate: function(user, done) {
      var yesterday;
      yesterday = {
        rank: user.dailyRank,
        xp: user.daily.xp,
        level: user.daily.level,
        shareFB: user.daily.shareFB,
        shareTW: user.daily.shareTW
      };
      console.log(yesterday);
      return getScore(yesterday, function(score) {
        var prepareGlobal;
        console.log("new score for " + user.local.pseudo + " today is " + score);
        prepareGlobal = {
          xp: user.xp,
          level: user.level,
          shareTW: user.global.shareTW,
          shareFB: user.global.shareFB
        };
        return getScore(prepareGlobal, function(globalScore) {
          console.log("new global score for " + user.local.pseudo + " is " + globalScore);
          return User.findById(user._id).exec(function(err, user) {
            mailer.cLog('Error at ' + __filename, err);
            yesterday.day = moment().subtract("days", 1).day();
            user.globalScore = globalScore;
            user.dailyScore = score;
            user.daily.xp = 0;
            user.daily.level = 0;
            user.daily.shareFB = 0;
            user.daily.shareTW = 0;
            user.dailyArchives.push(yesterday);
            return user.save(function(err) {
              mailer.cLog('Error at ' + __filename, err);
              return done(user);
            });
          });
        });
      });
    },
    weeklyUpdate: function(user, done) {
      var lastWeek;
      lastWeek = user.weekly;
      return getScore(lastWeek, function(score) {
        var prepareGlobal;
        console.log("new score for " + user.local.pseudo + " is " + score);
        prepareGlobal = {};
        prepareGlobal.xp = user.xp;
        prepareGlobal.level = user.level;
        prepareGlobal.shareTW = user.global.shareTW;
        prepareGlobal.shareFB = user.global.shareFB;
        return getScore(prepareGlobal, function(globalScore) {
          console.log("new global score for " + user.local.pseudo + " is " + globalScore);
          return User.findById(user._id).exec(function(err, user) {
            mailer.cLog('Error at ' + __filename, err);
            lastWeek.week = moment().subtract("weeks", 1).week();
            user.globalScore = globalScore;
            user.weeklyScore = score;
            user.weekly.xp = 0;
            user.weekly.level = 0;
            user.weekly.shareFB = 0;
            user.weekly.shareTW = 0;
            lastWeek.rank = user.weeklyRank;
            user.weeklyArchives.push(lastWeek);
            return user.save(function(err) {
              mailer.cLog('Error at ' + __filename, err);
              return done(user);
            });
          });
        });
      });
    },
    monthlyUpdate: function(user, done) {
      var lastMonth;
      lastMonth = user.monthly;
      return getScore(lastMonth, function(score) {
        var prepareGlobal;
        console.log("new monthly score for " + user.local.pseudo + " is " + score);
        prepareGlobal = {};
        prepareGlobal.xp = user.xp;
        prepareGlobal.level = user.level;
        prepareGlobal.shareTW = user.global.shareTW;
        prepareGlobal.shareFB = user.global.shareFB;
        return getScore(prepareGlobal, function(globalScore) {
          console.log("new global score for " + user.local.pseudo + " is " + globalScore);
          return User.findById(user._id).exec(function(err, user) {
            mailer.cLog('Error at ' + __filename, err);
            lastMonth.month = moment().subtract("months", 1).month();
            user.globalScore = globalScore;
            user.monthlyScore = score;
            user.monthly.xp = 0;
            user.monthly.level = 0;
            user.monthly.shareFB = 0;
            user.monthly.shareTW = 0;
            lastMonth.rank = user.monthlyRank;
            user.monthlyArchives.push(lastMonth);
            return user.save(function(err) {
              mailer.cLog('Error at ' + __filename, err);
              return done(user);
            });
          });
        });
      });
    },

    /*
    This will render the leaderboard for the week. Upgrade scores and res
    @param  {Function} done [description]
    @return {[type]}        [description]
     */
    createDailyLadder: function(callback) {
      var self;
      self = this;
      return User.find({}).sort("-_id").exec(function(err, usersList) {
        return _.each(usersList, function(element, ii, list) {
          return self.dailyUpdate(element, function(done) {
            var ranking, user;
            ranking = (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = done.length; _i < _len; _i++) {
                user = done[_i];
                _results.push(user);
              }
              return _results;
            })();
            console.log("User " + done.local.pseudo + " has been updated day " + done.dailyScore + " g " + done.globalScore);
            console.log((ii + 1) + ' ' + usersList.length);
            if (ii + 1 >= usersList.length) {
              return callback();
            }
          });
        });
      });
    },

    /*
    This will render the leaderboard for the week. Upgrade scores and res
    @param  {Function} done [description]
    @return {[type]}        [description]
     */
    createWeeklyLadder: function(callback) {
      var self;
      self = this;
      return User.find({}).sort("-_id").exec(function(err, usersList) {
        _.each(usersList, function(element, index) {
          return self.weeklyUpdate(element, function(done) {
            return console.log("User " + done.local.pseudo + " has been updated w " + done.weeklyScore + " g " + done.globalScore);
          });
        });
        return callback();
      });
    },

    /*
    This will render the leaderboard for the week. Upgrade scores and res
    @param  {Function} done [description]
    @return {[type]}        [description]
     */
    createMonthlyLadder: function(callback) {
      var self;
      self = this;
      return User.find({}).sort("-_id").exec(function(err, usersList) {
        _.each(usersList, function(element, index, list) {
          return self.monthlyUpdate(element, function(done) {
            return console.log("User " + done.local.pseudo + " has been updated month " + done.monthlyScore + " g " + done.globalScore);
          });
        });
        return callback();
      });
    },
    actionInc: function(user, action) {
      var query;
      query = void 0;
      if (action === "twitter") {
        query = {
          "weekly.shareTW": 1,
          "monthly.shareTW": 1,
          "global.shareTW": 1
        };
      } else if (action === "facebook") {
        query = {
          "weekly.shareFB": 1,
          "monthly.shareFB": 1,
          "global.shareFB": 1
        };
      } else {
        query = false;
        console.log(" ladders.js line 17 prompted");
      }
      if (query) {
        return User.findByIdAndUpdate(user._id, {
          $inc: query
        }).exec(function(err, userUpdated) {
          mailer.cLog('Error at ' + __filename, err);
          console.log(userUpdated.local.pseudo + " weekly stats : TW " + userUpdated.weekly.shareTW + " FB " + userUpdated.weekly.shareFB);
          return console.log(userUpdated.local.pseudo + " monthly stats : TW " + userUpdated.monthly.shareTW + " FB " + userUpdated.monthly.shareFB);
        });
      }
    }
  };

}).call(this);
